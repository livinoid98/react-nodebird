{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\admin\\\\Desktop\\\\react-nodebird\\\\ch1\\\\front\\\\components\\\\PostCard.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useCallback } from 'react';\nimport { Card, Button, Avatar, List, Comment } from 'antd';\nimport Icon from '@ant-design/icons';\nimport propTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Form from 'antd/lib/form/Form';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nvar PostCard = function PostCard(_ref) {\n  _s();\n\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var dispatch = useDispatch();\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n\n    if (!commentFormOpened) {}\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST\n    });\n  }, []);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.img && __jsx(\"img\", {\n      src: post.img,\n      alt: \"example\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 36\n      }\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }\n    })],\n    extra: __jsx(Button, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 24\n      }\n    }, \"\\uD314\\uB85C\\uC6B0\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 29\n      }\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: post.content,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(CommentForm, {\n    post: post,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 21\n    }\n  }), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }\n      }, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Link, {\n          href: {\n            pathname: '/user',\n            query: {\n              id: item.User.id\n            }\n          },\n          as: \"/user/\".concat(item.User.id),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 33\n          }\n        }, __jsx(\"a\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 33\n          }\n        }, __jsx(Avatar, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 36\n          }\n        }, item.User.nickname[0]))),\n        content: item.content,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 29\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  })));\n};\n\n_s(PostCard, \"2U1sn8gHW+hqaCnrJcPcsg2Z15U=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = PostCard;\nPostCard.propTypes = {\n  post: propTypes.shape({\n    User: propTypes.object,\n    content: propTypes.string,\n    img: propTypes.string,\n    createdAt: propTypes.object\n  })\n};\nexport default PostCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCard\");","map":{"version":3,"sources":["C:/Users/admin/Desktop/react-nodebird/ch1/front/components/PostCard.js"],"names":["React","useState","useCallback","Card","Button","Avatar","List","Comment","Icon","propTypes","useSelector","useDispatch","Form","ADD_COMMENT_REQUEST","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","dispatch","onToggleComment","prev","onSubmitComment","e","preventDefault","alert","type","onChangeCommentText","target","value","createdAt","img","User","nickname","content","Comments","length","item","pathname","query","id","shape","object","string"],"mappings":"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","sourcesContent":["import React, {useState,useCallback} from 'react'\r\nimport {Card,Button,Avatar, List, Comment} from 'antd'\r\nimport Icon from '@ant-design/icons'\r\nimport propTypes from 'prop-types'\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport Form from 'antd/lib/form/Form'\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post'\r\n\r\nconst PostCard = ({post}) => {\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [commentText, setCommentText] = useState('');\r\n    const {me} = useSelector(state => state.user);\r\n    const dispatch = useDispatch();\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened(prev => !prev);\r\n        if(!commentFormOpened){\r\n\r\n        }\r\n    },[]);\r\n\r\n    const onSubmitComment = useCallback((e) => {\r\n        e.preventDefault();\r\n        if(!me){\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n            type: ADD_COMMENT_REQUEST,\r\n        });\r\n    },[]);\r\n\r\n    const onChangeCommentText = useCallback((e) => {\r\n        setCommentText(e.target.value);\r\n    },[]);\r\n\r\n    return(\r\n        <div>\r\n            <Card\r\n                key={+post.createdAt}\r\n                cover={post.img && <img src={post.img} alt=\"example\"/>}\r\n                actions={[\r\n                    <Icon type=\"retweet\" key=\"retweet\"/>,\r\n                    <Icon type=\"heart\" key=\"heart\"/>,\r\n                    <Icon type=\"message\" key=\"message\" onClick={onToggleComment}/>,\r\n                    <Icon type=\"ellipsis\" key=\"ellipsis\"/>\r\n                ]}\r\n                extra={<Button>팔로우</Button>}\r\n            >\r\n                <Card.Meta\r\n                    avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n                    title={post.User.nickname}\r\n                    description={post.content}\r\n                />\r\n            </Card>\r\n                {commentFormOpened && (\r\n                    <>\r\n                    <CommentForm post={post} />\r\n                    <List\r\n                        header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={post.Comments || []}\r\n                        renderItem={(item) => (\r\n                        <li>\r\n                            <Comment\r\n                            author={item.User.nickname}\r\n                            avatar={(\r\n                                <Link href={{ pathname: '/user', query: { id: item.User.id } }} as={`/user/${item.User.id}`}>\r\n                                <a><Avatar>{item.User.nickname[0]}</Avatar></a>\r\n                                </Link>\r\n                            )}\r\n                            content={item.content}\r\n                            />\r\n                        </li>\r\n                        )}\r\n                    />\r\n                    </>\r\n                )}\r\n        </div>\r\n    );\r\n};\r\n\r\nPostCard.propTypes = {\r\n    post : propTypes.shape({\r\n        User : propTypes.object,\r\n        content : propTypes.string,\r\n        img : propTypes.string,\r\n        createdAt : propTypes.object,\r\n    }),\r\n}\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}