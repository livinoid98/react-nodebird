{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(signUp),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignUp),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, call, put, fork, takeLatest, takeEvery, delay } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\nimport axios from 'axios';\n\nfunction loginAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/login');\n}\n\nfunction signUpAPI() {}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            //put은 dispatch와 동일\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          //loginAPI 실패\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE,\n            error: _context.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction signUp() {\n  return _regeneratorRuntime.wrap(function signUp$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(signUpAPI);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          _context2.next = 12;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 12;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context2.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/admin/Desktop/react-nodebird/ch1/front/sagas/user.js"],"names":["login","signUp","watchLogin","watchSignUp","userSaga","all","call","put","fork","takeLatest","takeEvery","delay","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","axios","loginAPI","post","signUpAPI","type","console","error"],"mappings":";;oDAaUA,K;qDAgBAC,M;qDAeAC,U;qDAIAC,W;qDAIeC,Q;;AApDzB,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8BC,UAA9B,EAA0CC,SAA1C,EAAqDC,KAArD,QAAiE,oBAAjE;AACA,SAAQC,cAAR,EAAwBC,cAAxB,EAAwCC,cAAxC,EAAwDC,eAAxD,EAAyEC,eAAzE,EAA0FC,eAA1F,QAAgH,kBAAhH;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,GAAmB;AACf;AACA,SAAOD,KAAK,CAACE,IAAN,CAAW,QAAX,CAAP;AACH;;AAED,SAASC,SAAT,GAAoB,CAEnB;;AAED,SAAUrB,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMW,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMJ,GAAG,CAAC;AAAE;AACRe,YAAAA,IAAI,EAACT;AADC,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOe;AACPU,UAAAA,OAAO,CAACC,KAAR;AARR;AASQ,iBAAMjB,GAAG,CAAC;AACNe,YAAAA,IAAI,EAACR,cADC;AAENU,YAAAA,KAAK;AAFC,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUvB,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMK,IAAI,CAACe,SAAD,CAAV;;AAFR;AAAA;AAGQ,iBAAMd,GAAG,CAAC;AACNe,YAAAA,IAAI,EAAGN;AADD,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOQO,UAAAA,OAAO,CAACC,KAAR;AAPR;AAQQ,iBAAMjB,GAAG,CAAC;AACNe,YAAAA,IAAI,EAAEL,eADA;AAENO,YAAAA,KAAK;AAFC,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUtB,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAACG,cAAD,EAAiBZ,KAAjB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,SAAS,CAACK,eAAD,EAAkBd,MAAlB,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNG,IAAI,CAACN,UAAD,CADE,EAENM,IAAI,CAACL,WAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {all, call, put, fork, takeLatest, takeEvery, delay} from 'redux-saga/effects'\r\nimport {LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE} from '../reducers/user'\r\nimport axios from 'axios'\r\n\r\nfunction loginAPI(){\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.post('/login');\r\n}\r\n\r\nfunction signUpAPI(){\r\n\r\n}\r\n\r\nfunction* login(){\r\n    try{\r\n        // yield call(loginAPI);\r\n        yield delay(2000);\r\n        yield put({ //put은 dispatch와 동일\r\n            type:LOG_IN_SUCCESS,\r\n        });\r\n    }catch(e){ //loginAPI 실패\r\n        console.error(e);\r\n        yield put({\r\n            type:LOG_IN_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* signUp(){\r\n    try{\r\n        yield call(signUpAPI);\r\n        yield put({\r\n            type : SIGN_UP_SUCCESS,\r\n        });\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeLatest(LOG_IN_REQUEST, login);\r\n}\r\n\r\nfunction* watchSignUp(){\r\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchSignUp),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}