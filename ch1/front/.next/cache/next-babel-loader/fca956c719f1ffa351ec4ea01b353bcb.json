{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  mainPosts: [{\n    User: {\n      id: 1,\n      nickname: 'livinoid98'\n    },\n    content: '첫 번째 게시글',\n    img: 'https://cdn.pixabay.com/photo/2018/08/14/13/23/ocean-3605547_960_720.jpg'\n  }],\n  // 화면에 보일 포스트들\n  imagePaths: [],\n  // 미리보기 이미지 경로\n  addPostErrorReason: false // 포스트 업로드 실패 사유\n\n};\nconst ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nconst ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nconst ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nconst ADD_DUMMY = 'ADD_DUMMY';\nconst addPost = {\n  type: ADD_POST_REQUEST\n};\nconst addDummy = {\n  type: ADD_DUMMY,\n  data: {\n    content: 'hello',\n    UserId: 1,\n    User: {\n      nickname: 'livinoid'\n    }\n  }\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case ADD_DUMMY:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts: [action.data, ...state.mainPosts]\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/admin/Desktop/react-nodebird/ch1/front/reducers/post.js"],"names":["initialState","mainPosts","User","id","nickname","content","img","imagePaths","addPostErrorReason","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_DUMMY","addPost","type","addDummy","data","UserId","reducer","state","action","ADD_POST"],"mappings":";;;;;;AAAA,OAAO,MAAMA,YAAY,GAAG;AACxBC,EAAAA,SAAS,EAAG,CAAC;AACTC,IAAAA,IAAI,EAAC;AACDC,MAAAA,EAAE,EAAC,CADF;AAEDC,MAAAA,QAAQ,EAAC;AAFR,KADI;AAKTC,IAAAA,OAAO,EAAC,UALC;AAMTC,IAAAA,GAAG,EAAC;AANK,GAAD,CADY;AAQpB;AACJC,EAAAA,UAAU,EAAG,EATW;AASP;AACjBC,EAAAA,kBAAkB,EAAE,KAVI,CAUG;;AAVH,CAArB;AAaP,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,SAAS,GAAG,WAAlB;AAEA,MAAMC,OAAO,GAAG;AACZC,EAAAA,IAAI,EAAGL;AADK,CAAhB;AAGA,MAAMM,QAAQ,GAAG;AACbD,EAAAA,IAAI,EAAGF,SADM;AAEbI,EAAAA,IAAI,EAAG;AACHX,IAAAA,OAAO,EAAG,OADP;AAEHY,IAAAA,MAAM,EAAG,CAFN;AAGHf,IAAAA,IAAI,EAAG;AACHE,MAAAA,QAAQ,EAAG;AADR;AAHJ;AAFM,CAAjB;;AAWA,MAAMc,OAAO,GAAG,CAACC,KAAK,GAAGnB,YAAT,EAAuBoB,MAAvB,KAAkC;AAC9C,UAAOA,MAAM,CAACN,IAAd;AACI,SAAKO,QAAL;AAAe;AACX,iCACOF,KADP;AAGH;;AACD,SAAKP,SAAL;AAAgB;AACZ,+CACOO,KADP;AAEIlB,UAAAA,SAAS,EAAE,CAACmB,MAAM,CAACJ,IAAR,EAAc,GAAGG,KAAK,CAAClB,SAAvB;AAFf;AAIH;;AACD;AAAS;AACL,iCACOkB,KADP;AAGH;AAhBL;AAkBH,CAnBD;;AAqBA,eAAeD,OAAf","sourcesContent":["export const initialState = {\r\n    mainPosts : [{\r\n        User:{\r\n            id:1,\r\n            nickname:'livinoid98',\r\n        },\r\n        content:'첫 번째 게시글',\r\n        img:'https://cdn.pixabay.com/photo/2018/08/14/13/23/ocean-3605547_960_720.jpg',\r\n    }], // 화면에 보일 포스트들\r\n    imagePaths : [], // 미리보기 이미지 경로\r\n    addPostErrorReason: false, // 포스트 업로드 실패 사유\r\n};\r\n\r\nconst ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nconst ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nconst ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\nconst ADD_DUMMY = 'ADD_DUMMY';\r\n\r\nconst addPost = {\r\n    type : ADD_POST_REQUEST,\r\n};\r\nconst addDummy = {\r\n    type : ADD_DUMMY,\r\n    data : {\r\n        content : 'hello',\r\n        UserId : 1,\r\n        User : {\r\n            nickname : 'livinoid',\r\n        },\r\n    },\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case ADD_POST: {\r\n            return {\r\n                ...state,\r\n            };\r\n        }\r\n        case ADD_DUMMY: {\r\n            return {\r\n                ...state,\r\n                mainPosts: [action.data, ...state.mainPosts],\r\n            };\r\n        }\r\n        default: {\r\n            return {\r\n                ...state,\r\n            };\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}