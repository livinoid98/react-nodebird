{"ast":null,"code":"import { all, call, put, fork, takeLatest } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\n\nfunction loginAPI() {// 서버에 요청을 보내는 부분\n}\n\nfunction* login() {\n  try {\n    yield call(loginAPI);\n    yield put({\n      //put은 dispatch와 동일\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    //loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin)]);\n}","map":{"version":3,"sources":["C:/Users/admin/Desktop/react-nodebird/ch1/front/sagas/user.js"],"names":["all","call","put","fork","takeLatest","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","loginAPI","login","type","e","console","error","watchLogin","userSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8BC,UAA9B,QAA+C,oBAA/C;AACA,SAAQC,cAAR,EAAwBC,cAAxB,EAAwCC,cAAxC,QAA6D,kBAA7D;;AAEA,SAASC,QAAT,GAAmB,CACf;AACH;;AAED,UAAUC,KAAV,GAAiB;AACb,MAAG;AACC,UAAMR,IAAI,CAACO,QAAD,CAAV;AACA,UAAMN,GAAG,CAAC;AAAE;AACRQ,MAAAA,IAAI,EAACJ;AADC,KAAD,CAAT;AAGH,GALD,CAKC,OAAMK,CAAN,EAAQ;AAAE;AACPC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMT,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAACH;AADC,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUO,UAAV,GAAsB;AAClB,QAAMV,UAAU,CAACC,cAAD,EAAiBI,KAAjB,CAAhB;AACH;;AAED,eAAe,UAAUM,QAAV,GAAoB;AAC/B,QAAMf,GAAG,CAAC,CACNG,IAAI,CAACW,UAAD,CADE,CAAD,CAAT;AAGH","sourcesContent":["import {all, call, put, fork, takeLatest} from 'redux-saga/effects'\r\nimport {LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE} from '../reducers/user'\r\n\r\nfunction loginAPI(){\r\n    // 서버에 요청을 보내는 부분\r\n}\r\n\r\nfunction* login(){\r\n    try{\r\n        yield call(loginAPI);\r\n        yield put({ //put은 dispatch와 동일\r\n            type:LOG_IN_SUCCESS,\r\n        });\r\n    }catch(e){ //loginAPI 실패\r\n        console.error(e);\r\n        yield put({\r\n            type:LOG_IN_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeLatest(LOG_IN_REQUEST, login);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogin),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}