{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, call, put, fork, takeLatest } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\n\nfunction loginAPI() {// 서버에 요청을 보내는 부분\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            //put은 dispatch와 동일\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          //loginAPI 실패\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOG_IN, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchLogin)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/admin/Desktop/react-nodebird/ch1/front/sagas/user.js"],"names":["login","watchLogin","userSaga","all","call","put","fork","takeLatest","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","loginAPI","type","console","error"],"mappings":";;oDAOUA,K;qDAcAC,U;qDAIeC,Q;;AAzBzB,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8BC,UAA9B,QAA+C,oBAA/C;AACA,SAAQC,MAAR,EAAgBC,cAAhB,EAAgCC,cAAhC,QAAqD,kBAArD;;AAEA,SAASC,QAAT,GAAmB,CACf;AACH;;AAED,SAAUX,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMI,IAAI,CAACO,QAAD,CAAV;;AAFR;AAAA;AAGQ,iBAAMN,GAAG,CAAC;AAAE;AACRO,YAAAA,IAAI,EAACH;AADC,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAMe;AACPI,UAAAA,OAAO,CAACC,KAAR;AAPR;AAQQ,iBAAMT,GAAG,CAAC;AACNO,YAAAA,IAAI,EAACF;AADC,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUT,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAACC,MAAD,EAASR,KAAT,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNG,IAAI,CAACL,UAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {all, call, put, fork, takeLatest} from 'redux-saga/effects'\r\nimport {LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE} from '../reducers/user'\r\n\r\nfunction loginAPI(){\r\n    // 서버에 요청을 보내는 부분\r\n}\r\n\r\nfunction* login(){\r\n    try{\r\n        yield call(loginAPI);\r\n        yield put({ //put은 dispatch와 동일\r\n            type:LOG_IN_SUCCESS,\r\n        });\r\n    }catch(e){ //loginAPI 실패\r\n        console.error(e);\r\n        yield put({\r\n            type:LOG_IN_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeLatest(LOG_IN, login);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogin),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}